/**
 * Copyright (c) 2013 Oculus Info Inc. 
 * http://www.oculusinfo.com/
 * 
 * Released under the MIT License.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
@namespace("influent.idl")

/**
 */
protocol FL_EntitySearch {
	import idl "Search_v1.8.avdl";

	/*
	 */
	record FL_SearchResult {
		/** search score */
		double score = 0;
		
		/** search result */
		union {FL_Entity, FL_Link} result;
	}
	
	/**
	The set of results from a single search call. Each item also has a score.
	 */
	record FL_SearchResults {
		/** total number of results FOUND, which may be more than the number returned. */
		long total = 0;
		
		/** array of Items (Entities or Links) with scores */
		array<FL_SearchResult> results;
	}

	/**
	 Returns a set of Entity search results based on the query (if provides)
	 AND all matching terms (if any). Partial matches are allowed, but should
	 be ranked lower.
	 
	 Service URL: /entity/search
	 HTTP Method: POST and GET
	 
	 CHANGED IN 1.5
	 
	 @param terms		Property Search Terms
	 @param start		0-based index of first result to return
	 @param max			maximum number of results to return
	 @return			SearchResults
	 */
	FL_SearchResults search(
		array<FL_PropertyMatchDescriptor> terms = null,
		long start = 0, 
		long max = -1
	); 

	/**
	 An instance of PropertyDescriptors is used to contain the dataset-specific type and property descriptions returned
	 by getDescriptors()

	 ADDED IN 1.8

	 */
	record FL_PropertyDescriptors {
		array<FL_PropertyDescriptor> properties = null;
		array<FL_TypeDescriptor> types = null;
	}

	/**
	 Returns the property descriptors that can be used for a Search. This is normally used to populate the Advanced 
	 Search UI, providing a list of various sub-sets of the data (by type) and the valid search options for each.
	  
	 Service URL: /entity/descriptors
	 HTTP Method: GET
	 
	 @return a PropertyDescriptors instance that contains an array of PropertyDescriptor and an array of TypeDescriptor,
	 where fields in these descriptors contain info about the dataset-specific types and properties
	 	 
	 	 CHANGED IN 1.8
	 */
	FL_PropertyDescriptors getDescriptors();
}
