/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** Used to add constraints for entity searches.

          The 'memberOf' parameter is a list of FL_TypeMapping that describe the property in the given types.

          ADDED IN 1.8
     * */
@org.apache.avro.specific.AvroGenerated
public class FL_PropertyDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_PropertyDescriptor\",\"namespace\":\"influent.idl\",\"doc\":\"Used to add constraints for entity searches.\\n\\n          The 'memberOf' parameter is a list of FL_TypeMapping that describe the property in the given types.\\n\\n          ADDED IN 1.8\\n     *\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"property descriptor unique key\"},{\"name\":\"friendlyText\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"a human readable property name to display if the key isn't friendly (optional)\",\"default\":null},{\"name\":\"propertyType\",\"type\":{\"type\":\"enum\",\"name\":\"FL_PropertyType\",\"doc\":\"Allowed types for Property values.\\n\\n\\t CHANGED in 1.5\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"OTHER\"]},\"doc\":\"data type of the property\"},{\"name\":\"range\",\"type\":[{\"type\":\"enum\",\"name\":\"FL_RangeType\",\"doc\":\"Allowed types for Ranges of values.\\n\\t\\n\\tCHANGED IN 1.6\",\"symbols\":[\"SINGLETON\",\"LIST\",\"BOUNDED\",\"DISTRIBUTION\"]},\"null\"],\"doc\":\"range of the Property to search on\"},{\"name\":\"constraint\",\"type\":[{\"type\":\"enum\",\"name\":\"FL_Constraint\",\"doc\":\"Property value matching constraints\\n\\n\\t ADDED IN 1.8\",\"symbols\":[\"REQUIRED_EQUALS\",\"FUZZY_PARTIAL_OPTIONAL\",\"NOT\",\"OPTIONAL_EQUALS\",\"FUZZY_REQUIRED\"]},\"null\"],\"doc\":\"REQUIRED_EQUALS, FUZZY_PARTIAL_OPTIONAL, NOT, OPTIONAL_EQUALS, FUZZY_REQUIRED\"},{\"name\":\"freeTextIndexed\",\"type\":\"boolean\",\"doc\":\"indicates whether this property is indexed for free text queries *\",\"default\":false},{\"name\":\"defaultTerm\",\"type\":\"boolean\",\"doc\":\"indicates whether this property should be included in the set of default criteria to specify *\",\"default\":false},{\"name\":\"memberOf\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_TypeMapping\",\"doc\":\"Used to describe how an FL_PropertyDescriptor maps to given a type.\\n\\n\\t\\tADDED IN 1.8\\n\\t *\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The type that the mapping applies to *\"},{\"name\":\"memberKey\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"field that the FL_Property maps to in the type *\"}]}},\"doc\":\"List of mappings against types to which this property belongs,  *\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** property descriptor unique key */
   private java.lang.String key;
  /** a human readable property name to display if the key isn't friendly (optional) */
   private java.lang.String friendlyText;
  /** data type of the property */
   private influent.idl.FL_PropertyType propertyType;
  /** range of the Property to search on */
   private influent.idl.FL_RangeType range;
  /** REQUIRED_EQUALS, FUZZY_PARTIAL_OPTIONAL, NOT, OPTIONAL_EQUALS, FUZZY_REQUIRED */
   private influent.idl.FL_Constraint constraint;
  /** indicates whether this property is indexed for free text queries * */
   private boolean freeTextIndexed;
  /** indicates whether this property should be included in the set of default criteria to specify * */
   private boolean defaultTerm;
  /** List of mappings against types to which this property belongs,  * */
   private java.util.List<influent.idl.FL_TypeMapping> memberOf;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FL_PropertyDescriptor() {}

  /**
   * All-args constructor.
   */
  public FL_PropertyDescriptor(java.lang.String key, java.lang.String friendlyText, influent.idl.FL_PropertyType propertyType, influent.idl.FL_RangeType range, influent.idl.FL_Constraint constraint, java.lang.Boolean freeTextIndexed, java.lang.Boolean defaultTerm, java.util.List<influent.idl.FL_TypeMapping> memberOf) {
    this.key = key;
    this.friendlyText = friendlyText;
    this.propertyType = propertyType;
    this.range = range;
    this.constraint = constraint;
    this.freeTextIndexed = freeTextIndexed;
    this.defaultTerm = defaultTerm;
    this.memberOf = memberOf;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return friendlyText;
    case 2: return propertyType;
    case 3: return range;
    case 4: return constraint;
    case 5: return freeTextIndexed;
    case 6: return defaultTerm;
    case 7: return memberOf;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: friendlyText = (java.lang.String)value$; break;
    case 2: propertyType = (influent.idl.FL_PropertyType)value$; break;
    case 3: range = (influent.idl.FL_RangeType)value$; break;
    case 4: constraint = (influent.idl.FL_Constraint)value$; break;
    case 5: freeTextIndexed = (java.lang.Boolean)value$; break;
    case 6: defaultTerm = (java.lang.Boolean)value$; break;
    case 7: memberOf = (java.util.List<influent.idl.FL_TypeMapping>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * property descriptor unique key   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * property descriptor unique key   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'friendlyText' field.
   * a human readable property name to display if the key isn't friendly (optional)   */
  public java.lang.String getFriendlyText() {
    return friendlyText;
  }

  /**
   * Sets the value of the 'friendlyText' field.
   * a human readable property name to display if the key isn't friendly (optional)   * @param value the value to set.
   */
  public void setFriendlyText(java.lang.String value) {
    this.friendlyText = value;
  }

  /**
   * Gets the value of the 'propertyType' field.
   * data type of the property   */
  public influent.idl.FL_PropertyType getPropertyType() {
    return propertyType;
  }

  /**
   * Sets the value of the 'propertyType' field.
   * data type of the property   * @param value the value to set.
   */
  public void setPropertyType(influent.idl.FL_PropertyType value) {
    this.propertyType = value;
  }

  /**
   * Gets the value of the 'range' field.
   * range of the Property to search on   */
  public influent.idl.FL_RangeType getRange() {
    return range;
  }

  /**
   * Sets the value of the 'range' field.
   * range of the Property to search on   * @param value the value to set.
   */
  public void setRange(influent.idl.FL_RangeType value) {
    this.range = value;
  }

  /**
   * Gets the value of the 'constraint' field.
   * REQUIRED_EQUALS, FUZZY_PARTIAL_OPTIONAL, NOT, OPTIONAL_EQUALS, FUZZY_REQUIRED   */
  public influent.idl.FL_Constraint getConstraint() {
    return constraint;
  }

  /**
   * Sets the value of the 'constraint' field.
   * REQUIRED_EQUALS, FUZZY_PARTIAL_OPTIONAL, NOT, OPTIONAL_EQUALS, FUZZY_REQUIRED   * @param value the value to set.
   */
  public void setConstraint(influent.idl.FL_Constraint value) {
    this.constraint = value;
  }

  /**
   * Gets the value of the 'freeTextIndexed' field.
   * indicates whether this property is indexed for free text queries *   */
  public java.lang.Boolean getFreeTextIndexed() {
    return freeTextIndexed;
  }

  /**
   * Sets the value of the 'freeTextIndexed' field.
   * indicates whether this property is indexed for free text queries *   * @param value the value to set.
   */
  public void setFreeTextIndexed(java.lang.Boolean value) {
    this.freeTextIndexed = value;
  }

  /**
   * Gets the value of the 'defaultTerm' field.
   * indicates whether this property should be included in the set of default criteria to specify *   */
  public java.lang.Boolean getDefaultTerm() {
    return defaultTerm;
  }

  /**
   * Sets the value of the 'defaultTerm' field.
   * indicates whether this property should be included in the set of default criteria to specify *   * @param value the value to set.
   */
  public void setDefaultTerm(java.lang.Boolean value) {
    this.defaultTerm = value;
  }

  /**
   * Gets the value of the 'memberOf' field.
   * List of mappings against types to which this property belongs,  *   */
  public java.util.List<influent.idl.FL_TypeMapping> getMemberOf() {
    return memberOf;
  }

  /**
   * Sets the value of the 'memberOf' field.
   * List of mappings against types to which this property belongs,  *   * @param value the value to set.
   */
  public void setMemberOf(java.util.List<influent.idl.FL_TypeMapping> value) {
    this.memberOf = value;
  }

  /** Creates a new FL_PropertyDescriptor RecordBuilder */
  public static influent.idl.FL_PropertyDescriptor.Builder newBuilder() {
    return new influent.idl.FL_PropertyDescriptor.Builder();
  }
  
  /** Creates a new FL_PropertyDescriptor RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_PropertyDescriptor.Builder newBuilder(influent.idl.FL_PropertyDescriptor.Builder other) {
    return new influent.idl.FL_PropertyDescriptor.Builder(other);
  }
  
  /** Creates a new FL_PropertyDescriptor RecordBuilder by copying an existing FL_PropertyDescriptor instance */
  public static influent.idl.FL_PropertyDescriptor.Builder newBuilder(influent.idl.FL_PropertyDescriptor other) {
    return new influent.idl.FL_PropertyDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_PropertyDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_PropertyDescriptor>
    implements org.apache.avro.data.RecordBuilder<FL_PropertyDescriptor> {

    private java.lang.String key;
    private java.lang.String friendlyText;
    private influent.idl.FL_PropertyType propertyType;
    private influent.idl.FL_RangeType range;
    private influent.idl.FL_Constraint constraint;
    private boolean freeTextIndexed;
    private boolean defaultTerm;
    private java.util.List<influent.idl.FL_TypeMapping> memberOf;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_PropertyDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_PropertyDescriptor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.propertyType)) {
        this.propertyType = data().deepCopy(fields()[2].schema(), other.propertyType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.range)) {
        this.range = data().deepCopy(fields()[3].schema(), other.range);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.constraint)) {
        this.constraint = data().deepCopy(fields()[4].schema(), other.constraint);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.freeTextIndexed)) {
        this.freeTextIndexed = data().deepCopy(fields()[5].schema(), other.freeTextIndexed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.defaultTerm)) {
        this.defaultTerm = data().deepCopy(fields()[6].schema(), other.defaultTerm);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.memberOf)) {
        this.memberOf = data().deepCopy(fields()[7].schema(), other.memberOf);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FL_PropertyDescriptor instance */
    private Builder(influent.idl.FL_PropertyDescriptor other) {
            super(influent.idl.FL_PropertyDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.propertyType)) {
        this.propertyType = data().deepCopy(fields()[2].schema(), other.propertyType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.range)) {
        this.range = data().deepCopy(fields()[3].schema(), other.range);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.constraint)) {
        this.constraint = data().deepCopy(fields()[4].schema(), other.constraint);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.freeTextIndexed)) {
        this.freeTextIndexed = data().deepCopy(fields()[5].schema(), other.freeTextIndexed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.defaultTerm)) {
        this.defaultTerm = data().deepCopy(fields()[6].schema(), other.defaultTerm);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.memberOf)) {
        this.memberOf = data().deepCopy(fields()[7].schema(), other.memberOf);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public java.lang.String getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public influent.idl.FL_PropertyDescriptor.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'friendlyText' field */
    public java.lang.String getFriendlyText() {
      return friendlyText;
    }
    
    /** Sets the value of the 'friendlyText' field */
    public influent.idl.FL_PropertyDescriptor.Builder setFriendlyText(java.lang.String value) {
      validate(fields()[1], value);
      this.friendlyText = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'friendlyText' field has been set */
    public boolean hasFriendlyText() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'friendlyText' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearFriendlyText() {
      friendlyText = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'propertyType' field */
    public influent.idl.FL_PropertyType getPropertyType() {
      return propertyType;
    }
    
    /** Sets the value of the 'propertyType' field */
    public influent.idl.FL_PropertyDescriptor.Builder setPropertyType(influent.idl.FL_PropertyType value) {
      validate(fields()[2], value);
      this.propertyType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'propertyType' field has been set */
    public boolean hasPropertyType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'propertyType' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearPropertyType() {
      propertyType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'range' field */
    public influent.idl.FL_RangeType getRange() {
      return range;
    }
    
    /** Sets the value of the 'range' field */
    public influent.idl.FL_PropertyDescriptor.Builder setRange(influent.idl.FL_RangeType value) {
      validate(fields()[3], value);
      this.range = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'range' field has been set */
    public boolean hasRange() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'range' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearRange() {
      range = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'constraint' field */
    public influent.idl.FL_Constraint getConstraint() {
      return constraint;
    }
    
    /** Sets the value of the 'constraint' field */
    public influent.idl.FL_PropertyDescriptor.Builder setConstraint(influent.idl.FL_Constraint value) {
      validate(fields()[4], value);
      this.constraint = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'constraint' field has been set */
    public boolean hasConstraint() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'constraint' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearConstraint() {
      constraint = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'freeTextIndexed' field */
    public java.lang.Boolean getFreeTextIndexed() {
      return freeTextIndexed;
    }
    
    /** Sets the value of the 'freeTextIndexed' field */
    public influent.idl.FL_PropertyDescriptor.Builder setFreeTextIndexed(boolean value) {
      validate(fields()[5], value);
      this.freeTextIndexed = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'freeTextIndexed' field has been set */
    public boolean hasFreeTextIndexed() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'freeTextIndexed' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearFreeTextIndexed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'defaultTerm' field */
    public java.lang.Boolean getDefaultTerm() {
      return defaultTerm;
    }
    
    /** Sets the value of the 'defaultTerm' field */
    public influent.idl.FL_PropertyDescriptor.Builder setDefaultTerm(boolean value) {
      validate(fields()[6], value);
      this.defaultTerm = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'defaultTerm' field has been set */
    public boolean hasDefaultTerm() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'defaultTerm' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearDefaultTerm() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'memberOf' field */
    public java.util.List<influent.idl.FL_TypeMapping> getMemberOf() {
      return memberOf;
    }
    
    /** Sets the value of the 'memberOf' field */
    public influent.idl.FL_PropertyDescriptor.Builder setMemberOf(java.util.List<influent.idl.FL_TypeMapping> value) {
      validate(fields()[7], value);
      this.memberOf = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'memberOf' field has been set */
    public boolean hasMemberOf() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'memberOf' field */
    public influent.idl.FL_PropertyDescriptor.Builder clearMemberOf() {
      memberOf = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public FL_PropertyDescriptor build() {
      try {
        FL_PropertyDescriptor record = new FL_PropertyDescriptor();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.friendlyText = fieldSetFlags()[1] ? this.friendlyText : (java.lang.String) defaultValue(fields()[1]);
        record.propertyType = fieldSetFlags()[2] ? this.propertyType : (influent.idl.FL_PropertyType) defaultValue(fields()[2]);
        record.range = fieldSetFlags()[3] ? this.range : (influent.idl.FL_RangeType) defaultValue(fields()[3]);
        record.constraint = fieldSetFlags()[4] ? this.constraint : (influent.idl.FL_Constraint) defaultValue(fields()[4]);
        record.freeTextIndexed = fieldSetFlags()[5] ? this.freeTextIndexed : (java.lang.Boolean) defaultValue(fields()[5]);
        record.defaultTerm = fieldSetFlags()[6] ? this.defaultTerm : (java.lang.Boolean) defaultValue(fields()[6]);
        record.memberOf = fieldSetFlags()[7] ? this.memberOf : (java.util.List<influent.idl.FL_TypeMapping>) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
