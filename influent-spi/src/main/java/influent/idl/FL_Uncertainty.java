/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.
	
	CHANGED IN 1.6 */
@org.apache.avro.specific.AvroGenerated
public class FL_Uncertainty extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_Uncertainty\",\"namespace\":\"influent.idl\",\"doc\":\"This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.\\n\\t\\n\\tCHANGED IN 1.6\",\"fields\":[{\"name\":\"confidence\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express original source confidence as a single number from 0 to 1.\",\"default\":1},{\"name\":\"currency\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Placeholder for now. Express original source confidence as a single number from 0 to 1. */
   private double confidence;
  /** Placeholder for now. Express confidence in currency of data as a single number from 0 to 1. */
   private double currency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FL_Uncertainty() {}

  /**
   * All-args constructor.
   */
  public FL_Uncertainty(java.lang.Double confidence, java.lang.Double currency) {
    this.confidence = confidence;
    this.currency = currency;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return confidence;
    case 1: return currency;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: confidence = (java.lang.Double)value$; break;
    case 1: currency = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'confidence' field.
   * Placeholder for now. Express original source confidence as a single number from 0 to 1.   */
  public java.lang.Double getConfidence() {
    return confidence;
  }

  /**
   * Sets the value of the 'confidence' field.
   * Placeholder for now. Express original source confidence as a single number from 0 to 1.   * @param value the value to set.
   */
  public void setConfidence(java.lang.Double value) {
    this.confidence = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.   */
  public java.lang.Double getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.   * @param value the value to set.
   */
  public void setCurrency(java.lang.Double value) {
    this.currency = value;
  }

  /** Creates a new FL_Uncertainty RecordBuilder */
  public static influent.idl.FL_Uncertainty.Builder newBuilder() {
    return new influent.idl.FL_Uncertainty.Builder();
  }
  
  /** Creates a new FL_Uncertainty RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_Uncertainty.Builder newBuilder(influent.idl.FL_Uncertainty.Builder other) {
    return new influent.idl.FL_Uncertainty.Builder(other);
  }
  
  /** Creates a new FL_Uncertainty RecordBuilder by copying an existing FL_Uncertainty instance */
  public static influent.idl.FL_Uncertainty.Builder newBuilder(influent.idl.FL_Uncertainty other) {
    return new influent.idl.FL_Uncertainty.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_Uncertainty instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_Uncertainty>
    implements org.apache.avro.data.RecordBuilder<FL_Uncertainty> {

    private double confidence;
    private double currency;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_Uncertainty.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_Uncertainty.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.confidence)) {
        this.confidence = data().deepCopy(fields()[0].schema(), other.confidence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FL_Uncertainty instance */
    private Builder(influent.idl.FL_Uncertainty other) {
            super(influent.idl.FL_Uncertainty.SCHEMA$);
      if (isValidValue(fields()[0], other.confidence)) {
        this.confidence = data().deepCopy(fields()[0].schema(), other.confidence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'confidence' field */
    public java.lang.Double getConfidence() {
      return confidence;
    }
    
    /** Sets the value of the 'confidence' field */
    public influent.idl.FL_Uncertainty.Builder setConfidence(double value) {
      validate(fields()[0], value);
      this.confidence = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'confidence' field has been set */
    public boolean hasConfidence() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'confidence' field */
    public influent.idl.FL_Uncertainty.Builder clearConfidence() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'currency' field */
    public java.lang.Double getCurrency() {
      return currency;
    }
    
    /** Sets the value of the 'currency' field */
    public influent.idl.FL_Uncertainty.Builder setCurrency(double value) {
      validate(fields()[1], value);
      this.currency = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'currency' field has been set */
    public boolean hasCurrency() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'currency' field */
    public influent.idl.FL_Uncertainty.Builder clearCurrency() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FL_Uncertainty build() {
      try {
        FL_Uncertainty record = new FL_Uncertainty();
        record.confidence = fieldSetFlags()[0] ? this.confidence : (java.lang.Double) defaultValue(fields()[0]);
        record.currency = fieldSetFlags()[1] ? this.currency : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
