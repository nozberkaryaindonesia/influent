/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** Used to describe how an FL_PropertyDescriptor maps to given a type.

		ADDED IN 1.8
	 * */
@org.apache.avro.specific.AvroGenerated
public class FL_TypeMapping extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_TypeMapping\",\"namespace\":\"influent.idl\",\"doc\":\"Used to describe how an FL_PropertyDescriptor maps to given a type.\\n\\n\\t\\tADDED IN 1.8\\n\\t *\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The type that the mapping applies to *\"},{\"name\":\"memberKey\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"field that the FL_Property maps to in the type *\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The type that the mapping applies to * */
   private java.lang.String type;
  /** field that the FL_Property maps to in the type * */
   private java.lang.String memberKey;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FL_TypeMapping() {}

  /**
   * All-args constructor.
   */
  public FL_TypeMapping(java.lang.String type, java.lang.String memberKey) {
    this.type = type;
    this.memberKey = memberKey;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return memberKey;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.String)value$; break;
    case 1: memberKey = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * The type that the mapping applies to *   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type that the mapping applies to *   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'memberKey' field.
   * field that the FL_Property maps to in the type *   */
  public java.lang.String getMemberKey() {
    return memberKey;
  }

  /**
   * Sets the value of the 'memberKey' field.
   * field that the FL_Property maps to in the type *   * @param value the value to set.
   */
  public void setMemberKey(java.lang.String value) {
    this.memberKey = value;
  }

  /** Creates a new FL_TypeMapping RecordBuilder */
  public static influent.idl.FL_TypeMapping.Builder newBuilder() {
    return new influent.idl.FL_TypeMapping.Builder();
  }
  
  /** Creates a new FL_TypeMapping RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_TypeMapping.Builder newBuilder(influent.idl.FL_TypeMapping.Builder other) {
    return new influent.idl.FL_TypeMapping.Builder(other);
  }
  
  /** Creates a new FL_TypeMapping RecordBuilder by copying an existing FL_TypeMapping instance */
  public static influent.idl.FL_TypeMapping.Builder newBuilder(influent.idl.FL_TypeMapping other) {
    return new influent.idl.FL_TypeMapping.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_TypeMapping instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_TypeMapping>
    implements org.apache.avro.data.RecordBuilder<FL_TypeMapping> {

    private java.lang.String type;
    private java.lang.String memberKey;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_TypeMapping.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_TypeMapping.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memberKey)) {
        this.memberKey = data().deepCopy(fields()[1].schema(), other.memberKey);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FL_TypeMapping instance */
    private Builder(influent.idl.FL_TypeMapping other) {
            super(influent.idl.FL_TypeMapping.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memberKey)) {
        this.memberKey = data().deepCopy(fields()[1].schema(), other.memberKey);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public influent.idl.FL_TypeMapping.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public influent.idl.FL_TypeMapping.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'memberKey' field */
    public java.lang.String getMemberKey() {
      return memberKey;
    }
    
    /** Sets the value of the 'memberKey' field */
    public influent.idl.FL_TypeMapping.Builder setMemberKey(java.lang.String value) {
      validate(fields()[1], value);
      this.memberKey = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'memberKey' field has been set */
    public boolean hasMemberKey() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'memberKey' field */
    public influent.idl.FL_TypeMapping.Builder clearMemberKey() {
      memberKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FL_TypeMapping build() {
      try {
        FL_TypeMapping record = new FL_TypeMapping();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.memberKey = fieldSetFlags()[1] ? this.memberKey : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
