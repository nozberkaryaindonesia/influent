/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** Cluster of nodes in the social, financial, communications or other graphs. 
	 
	 CHANGED in 1.7:
	    - added version */
@org.apache.avro.specific.AvroGenerated
public class FL_Cluster extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_Cluster\",\"namespace\":\"influent.idl\",\"doc\":\"Cluster of nodes in the social, financial, communications or other graphs. \\n\\t \\n\\t CHANGED in 1.7:\\n\\t    - added version\",\"fields\":[{\"name\":\"uid\",\"type\":\"string\",\"doc\":\"A unique identifier use to retrieve data about this cluster. Should not be used for non-global identifiers.\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_EntityTag\",\"doc\":\"This is the current list of tags for Entities:\\n\\t \\n\\t CHANGED in 1.6:\\n\\t   - added ACCOUNT_OWNER, CLUSTER_SUMMARY\",\"symbols\":[\"ACCOUNT_OWNER\",\"ACCOUNT\",\"GROUP\",\"CLUSTER\",\"CLUSTER_SUMMARY\",\"FILE\",\"ANONYMOUS\",\"PROMPT_FOR_DETAILS\",\"OTHER\"]}},\"doc\":\"Entity Tags (see DataTypes, e.g. \\\"CLUSTER\\\")\"},{\"name\":\"provenance\",\"type\":[{\"type\":\"record\",\"name\":\"FL_Provenance\",\"doc\":\"This is a placeholder for future modeling of provenance. It is not a required field in any service calls.\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\",\"doc\":\"Placeholder for now. Express provenance as a single URI.\"}]},\"null\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[{\"type\":\"record\",\"name\":\"FL_Uncertainty\",\"doc\":\"This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.\\n\\t\\n\\tCHANGED IN 1.6\",\"fields\":[{\"name\":\"confidence\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express original source confidence as a single number from 0 to 1.\",\"default\":1},{\"name\":\"currency\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.\",\"default\":1}]},\"null\"],\"default\":null},{\"name\":\"properties\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_Property\",\"doc\":\"Each property on an Entity or Link is a name-value pair, with data type information, as well as optional\\n\\t provenance. Tags provide a way for the data provider to associate semantic annotations to each property\\n\\t in terms of the semantics of the application.  \\n\\t \\n\\t CHANGED IN 1.6\",\"fields\":[{\"name\":\"key\",\"type\":\"string\",\"doc\":\"the field name in the underlying data source\"},{\"name\":\"friendlyText\",\"type\":[\"null\",\"string\"],\"doc\":\"user-friendly short-text for key (displayable)\",\"default\":null},{\"name\":\"range\",\"type\":[{\"type\":\"record\",\"name\":\"FL_SingletonRange\",\"doc\":\"Single value\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"value\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"FL_GeoData\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[\"null\",\"string\"],\"doc\":\"ISO 3 digit country code\",\"default\":null}]}]},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FL_PropertyType\",\"doc\":\"Allowed types for Property values.\\n\\n\\t CHANGED in 1.5\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"OTHER\"]},\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},{\"type\":\"record\",\"name\":\"FL_ListRange\",\"doc\":\"List of values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\"]}},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},{\"type\":\"record\",\"name\":\"FL_BoundedRange\",\"doc\":\"Bounded or unbounded range values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"start\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"null\"],\"doc\":\"start of range, or null if unbounded start\"},{\"name\":\"end\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"null\"],\"doc\":\"end of range, or null if unbounded start\"},{\"name\":\"inclusive\",\"type\":\"boolean\",\"doc\":\"If true, range includes specified endpoint. If false, range is exclusive.\"},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},{\"type\":\"record\",\"name\":\"FL_DistributionRange\",\"doc\":\"Describes a distribution of values. \\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"distribution\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_Frequency\",\"doc\":\"A frequency or probability element of a distribution.\\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"range\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"FL_ListRange\",\"FL_BoundedRange\"],\"doc\":\"the value range which occurs with some specified frequency\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"frequency as a count, or probability as a value from 0-1.\"}]}}},{\"name\":\"rangeType\",\"type\":{\"type\":\"enum\",\"name\":\"FL_RangeType\",\"doc\":\"Allowed types for Ranges of values.\\n\\t\\n\\tCHANGED IN 1.6\",\"symbols\":[\"SINGLETON\",\"LIST\",\"BOUNDED\",\"DISTRIBUTION\"]},\"doc\":\"Describes how the values in the distribution are summarised\"},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"The type of value that the distribution describes. One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"},{\"name\":\"isProbability\",\"type\":\"boolean\",\"doc\":\"True if a probability distribution, false if a frequency distribution\",\"default\":false}]}],\"doc\":\"range of values\",\"default\":null},{\"name\":\"provenance\",\"type\":[\"FL_Provenance\",\"null\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[\"FL_Uncertainty\",\"null\"],\"default\":null},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_PropertyTag\",\"doc\":\"Tags are defined by the application layer as a taxonomy of user and application concepts,\\n\\t independent of the data sources. This allows application semantics to be re-used with new\\n\\t data, with a minimum of new software design and development. Data layer entity types, link\\n\\t types and properties should be mapped into the list of tags. The application layer must be\\n\\t able to search by native field name or by tag interchangeably, and properties returned must\\n\\t contain both native field names as well as tags.\\n\\t \\n\\t The list of tags may change as application features evolve, though that will require\\n\\t collaboration with the data layer providers. Evolving the tag list should not change the\\n\\t Data Access or Search APIs.\\n\\n\\t This is the current list of tags for Properties:\\n\\t \\n\\t CHANGED in 1.5:\\n\\t   - CREDIT/DEBIT changed to INFLOWING/OUTFLOWING\\n\\t   - added USD\\n\\t   - added DURATION\\n\\t   \\n\\t CHANGED in 1.6:\\n\\t   - added ENTITY_TYPE\\n\\t   - added ACCOUNT_OWNER, CLUSTER_SUMMARY, COUNTRY_CODE\\n\\t   \\n\\t CHANGED in 1.7:\\n\\t   - added CLUSTER\",\"symbols\":[\"ID\",\"TYPE\",\"ENTITY_TYPE\",\"ACCOUNT_OWNER\",\"CLUSTER_SUMMARY\",\"CLUSTER\",\"NAME\",\"LABEL\",\"STAT\",\"TEXT\",\"STATUS\",\"ANNOTATION\",\"WARNING\",\"LINKED_DATA\",\"IMAGE\",\"GEO\",\"COUNTRY_CODE\",\"DATE\",\"AMOUNT\",\"INFLOWING\",\"OUTFLOWING\",\"COUNT\",\"SERIES\",\"CONSTRUCTED\",\"RAW\",\"USD\",\"DURATION\"]}},\"doc\":\"one or more tags from the Tag list, used to map this source-specific field into the semantics of applications\"}]}}},{\"name\":\"members\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"List of id's of the members of this cluster\"},{\"name\":\"subclusters\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"List of id's of the subclusters of this cluster - empty if this is a leaf cluster in cluster hierarchy\"},{\"name\":\"parent\",\"type\":[\"null\",\"string\"],\"doc\":\"The id of the parent cluster if this is a cluster in a hierarchy - Can be null if this is a root cluster *\",\"default\":null},{\"name\":\"root\",\"type\":[\"null\",\"string\"],\"doc\":\"The id of the root cluster (top level cluster) if this is a cluster in a hierarchy - Can be null if this is a root cluster *\",\"default\":null},{\"name\":\"level\",\"type\":\"int\",\"doc\":\"The degree from the root this cluster is in the hierarchy - level = 0 if this is a root cluster *\",\"default\":0},{\"name\":\"version\",\"type\":\"int\",\"doc\":\"The version number of the cluster - each time the cluster contents is modified the version should be incremented *\",\"default\":1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A unique identifier use to retrieve data about this cluster. Should not be used for non-global identifiers. */
  @Deprecated public java.lang.CharSequence uid;
  /** Entity Tags (see DataTypes, e.g. "CLUSTER") */
  @Deprecated public java.util.List<influent.idl.FL_EntityTag> tags;
  @Deprecated public influent.idl.FL_Provenance provenance;
  @Deprecated public influent.idl.FL_Uncertainty uncertainty;
  @Deprecated public java.util.List<influent.idl.FL_Property> properties;
  /** List of id's of the members of this cluster */
  @Deprecated public java.util.List<java.lang.CharSequence> members;
  /** List of id's of the subclusters of this cluster - empty if this is a leaf cluster in cluster hierarchy */
  @Deprecated public java.util.List<java.lang.CharSequence> subclusters;
  /** The id of the parent cluster if this is a cluster in a hierarchy - Can be null if this is a root cluster * */
  @Deprecated public java.lang.CharSequence parent;
  /** The id of the root cluster (top level cluster) if this is a cluster in a hierarchy - Can be null if this is a root cluster * */
  @Deprecated public java.lang.CharSequence root;
  /** The degree from the root this cluster is in the hierarchy - level = 0 if this is a root cluster * */
  @Deprecated public int level;
  /** The version number of the cluster - each time the cluster contents is modified the version should be incremented * */
  @Deprecated public int version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FL_Cluster() {}

  /**
   * All-args constructor.
   */
  public FL_Cluster(java.lang.CharSequence uid, java.util.List<influent.idl.FL_EntityTag> tags, influent.idl.FL_Provenance provenance, influent.idl.FL_Uncertainty uncertainty, java.util.List<influent.idl.FL_Property> properties, java.util.List<java.lang.CharSequence> members, java.util.List<java.lang.CharSequence> subclusters, java.lang.CharSequence parent, java.lang.CharSequence root, java.lang.Integer level, java.lang.Integer version) {
    this.uid = uid;
    this.tags = tags;
    this.provenance = provenance;
    this.uncertainty = uncertainty;
    this.properties = properties;
    this.members = members;
    this.subclusters = subclusters;
    this.parent = parent;
    this.root = root;
    this.level = level;
    this.version = version;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return tags;
    case 2: return provenance;
    case 3: return uncertainty;
    case 4: return properties;
    case 5: return members;
    case 6: return subclusters;
    case 7: return parent;
    case 8: return root;
    case 9: return level;
    case 10: return version;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.CharSequence)value$; break;
    case 1: tags = (java.util.List<influent.idl.FL_EntityTag>)value$; break;
    case 2: provenance = (influent.idl.FL_Provenance)value$; break;
    case 3: uncertainty = (influent.idl.FL_Uncertainty)value$; break;
    case 4: properties = (java.util.List<influent.idl.FL_Property>)value$; break;
    case 5: members = (java.util.List<java.lang.CharSequence>)value$; break;
    case 6: subclusters = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: parent = (java.lang.CharSequence)value$; break;
    case 8: root = (java.lang.CharSequence)value$; break;
    case 9: level = (java.lang.Integer)value$; break;
    case 10: version = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * A unique identifier use to retrieve data about this cluster. Should not be used for non-global identifiers.   */
  public java.lang.CharSequence getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * A unique identifier use to retrieve data about this cluster. Should not be used for non-global identifiers.   * @param value the value to set.
   */
  public void setUid(java.lang.CharSequence value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * Entity Tags (see DataTypes, e.g. "CLUSTER")   */
  public java.util.List<influent.idl.FL_EntityTag> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * Entity Tags (see DataTypes, e.g. "CLUSTER")   * @param value the value to set.
   */
  public void setTags(java.util.List<influent.idl.FL_EntityTag> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'provenance' field.
   */
  public influent.idl.FL_Provenance getProvenance() {
    return provenance;
  }

  /**
   * Sets the value of the 'provenance' field.
   * @param value the value to set.
   */
  public void setProvenance(influent.idl.FL_Provenance value) {
    this.provenance = value;
  }

  /**
   * Gets the value of the 'uncertainty' field.
   */
  public influent.idl.FL_Uncertainty getUncertainty() {
    return uncertainty;
  }

  /**
   * Sets the value of the 'uncertainty' field.
   * @param value the value to set.
   */
  public void setUncertainty(influent.idl.FL_Uncertainty value) {
    this.uncertainty = value;
  }

  /**
   * Gets the value of the 'properties' field.
   */
  public java.util.List<influent.idl.FL_Property> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.List<influent.idl.FL_Property> value) {
    this.properties = value;
  }

  /**
   * Gets the value of the 'members' field.
   * List of id's of the members of this cluster   */
  public java.util.List<java.lang.CharSequence> getMembers() {
    return members;
  }

  /**
   * Sets the value of the 'members' field.
   * List of id's of the members of this cluster   * @param value the value to set.
   */
  public void setMembers(java.util.List<java.lang.CharSequence> value) {
    this.members = value;
  }

  /**
   * Gets the value of the 'subclusters' field.
   * List of id's of the subclusters of this cluster - empty if this is a leaf cluster in cluster hierarchy   */
  public java.util.List<java.lang.CharSequence> getSubclusters() {
    return subclusters;
  }

  /**
   * Sets the value of the 'subclusters' field.
   * List of id's of the subclusters of this cluster - empty if this is a leaf cluster in cluster hierarchy   * @param value the value to set.
   */
  public void setSubclusters(java.util.List<java.lang.CharSequence> value) {
    this.subclusters = value;
  }

  /**
   * Gets the value of the 'parent' field.
   * The id of the parent cluster if this is a cluster in a hierarchy - Can be null if this is a root cluster *   */
  public java.lang.CharSequence getParent() {
    return parent;
  }

  /**
   * Sets the value of the 'parent' field.
   * The id of the parent cluster if this is a cluster in a hierarchy - Can be null if this is a root cluster *   * @param value the value to set.
   */
  public void setParent(java.lang.CharSequence value) {
    this.parent = value;
  }

  /**
   * Gets the value of the 'root' field.
   * The id of the root cluster (top level cluster) if this is a cluster in a hierarchy - Can be null if this is a root cluster *   */
  public java.lang.CharSequence getRoot() {
    return root;
  }

  /**
   * Sets the value of the 'root' field.
   * The id of the root cluster (top level cluster) if this is a cluster in a hierarchy - Can be null if this is a root cluster *   * @param value the value to set.
   */
  public void setRoot(java.lang.CharSequence value) {
    this.root = value;
  }

  /**
   * Gets the value of the 'level' field.
   * The degree from the root this cluster is in the hierarchy - level = 0 if this is a root cluster *   */
  public java.lang.Integer getLevel() {
    return level;
  }

  /**
   * Sets the value of the 'level' field.
   * The degree from the root this cluster is in the hierarchy - level = 0 if this is a root cluster *   * @param value the value to set.
   */
  public void setLevel(java.lang.Integer value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'version' field.
   * The version number of the cluster - each time the cluster contents is modified the version should be incremented *   */
  public java.lang.Integer getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * The version number of the cluster - each time the cluster contents is modified the version should be incremented *   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /** Creates a new FL_Cluster RecordBuilder */
  public static influent.idl.FL_Cluster.Builder newBuilder() {
    return new influent.idl.FL_Cluster.Builder();
  }
  
  /** Creates a new FL_Cluster RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_Cluster.Builder newBuilder(influent.idl.FL_Cluster.Builder other) {
    return new influent.idl.FL_Cluster.Builder(other);
  }
  
  /** Creates a new FL_Cluster RecordBuilder by copying an existing FL_Cluster instance */
  public static influent.idl.FL_Cluster.Builder newBuilder(influent.idl.FL_Cluster other) {
    return new influent.idl.FL_Cluster.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_Cluster instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_Cluster>
    implements org.apache.avro.data.RecordBuilder<FL_Cluster> {

    private java.lang.CharSequence uid;
    private java.util.List<influent.idl.FL_EntityTag> tags;
    private influent.idl.FL_Provenance provenance;
    private influent.idl.FL_Uncertainty uncertainty;
    private java.util.List<influent.idl.FL_Property> properties;
    private java.util.List<java.lang.CharSequence> members;
    private java.util.List<java.lang.CharSequence> subclusters;
    private java.lang.CharSequence parent;
    private java.lang.CharSequence root;
    private int level;
    private int version;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_Cluster.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_Cluster.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tags)) {
        this.tags = data().deepCopy(fields()[1].schema(), other.tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provenance)) {
        this.provenance = data().deepCopy(fields()[2].schema(), other.provenance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uncertainty)) {
        this.uncertainty = data().deepCopy(fields()[3].schema(), other.uncertainty);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.members)) {
        this.members = data().deepCopy(fields()[5].schema(), other.members);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.subclusters)) {
        this.subclusters = data().deepCopy(fields()[6].schema(), other.subclusters);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.parent)) {
        this.parent = data().deepCopy(fields()[7].schema(), other.parent);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.root)) {
        this.root = data().deepCopy(fields()[8].schema(), other.root);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.level)) {
        this.level = data().deepCopy(fields()[9].schema(), other.level);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.version)) {
        this.version = data().deepCopy(fields()[10].schema(), other.version);
        fieldSetFlags()[10] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FL_Cluster instance */
    private Builder(influent.idl.FL_Cluster other) {
            super(influent.idl.FL_Cluster.SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tags)) {
        this.tags = data().deepCopy(fields()[1].schema(), other.tags);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.provenance)) {
        this.provenance = data().deepCopy(fields()[2].schema(), other.provenance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.uncertainty)) {
        this.uncertainty = data().deepCopy(fields()[3].schema(), other.uncertainty);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.properties)) {
        this.properties = data().deepCopy(fields()[4].schema(), other.properties);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.members)) {
        this.members = data().deepCopy(fields()[5].schema(), other.members);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.subclusters)) {
        this.subclusters = data().deepCopy(fields()[6].schema(), other.subclusters);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.parent)) {
        this.parent = data().deepCopy(fields()[7].schema(), other.parent);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.root)) {
        this.root = data().deepCopy(fields()[8].schema(), other.root);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.level)) {
        this.level = data().deepCopy(fields()[9].schema(), other.level);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.version)) {
        this.version = data().deepCopy(fields()[10].schema(), other.version);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'uid' field */
    public java.lang.CharSequence getUid() {
      return uid;
    }
    
    /** Sets the value of the 'uid' field */
    public influent.idl.FL_Cluster.Builder setUid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uid' field has been set */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uid' field */
    public influent.idl.FL_Cluster.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.List<influent.idl.FL_EntityTag> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public influent.idl.FL_Cluster.Builder setTags(java.util.List<influent.idl.FL_EntityTag> value) {
      validate(fields()[1], value);
      this.tags = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'tags' field */
    public influent.idl.FL_Cluster.Builder clearTags() {
      tags = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'provenance' field */
    public influent.idl.FL_Provenance getProvenance() {
      return provenance;
    }
    
    /** Sets the value of the 'provenance' field */
    public influent.idl.FL_Cluster.Builder setProvenance(influent.idl.FL_Provenance value) {
      validate(fields()[2], value);
      this.provenance = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'provenance' field has been set */
    public boolean hasProvenance() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'provenance' field */
    public influent.idl.FL_Cluster.Builder clearProvenance() {
      provenance = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'uncertainty' field */
    public influent.idl.FL_Uncertainty getUncertainty() {
      return uncertainty;
    }
    
    /** Sets the value of the 'uncertainty' field */
    public influent.idl.FL_Cluster.Builder setUncertainty(influent.idl.FL_Uncertainty value) {
      validate(fields()[3], value);
      this.uncertainty = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'uncertainty' field has been set */
    public boolean hasUncertainty() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'uncertainty' field */
    public influent.idl.FL_Cluster.Builder clearUncertainty() {
      uncertainty = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'properties' field */
    public java.util.List<influent.idl.FL_Property> getProperties() {
      return properties;
    }
    
    /** Sets the value of the 'properties' field */
    public influent.idl.FL_Cluster.Builder setProperties(java.util.List<influent.idl.FL_Property> value) {
      validate(fields()[4], value);
      this.properties = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'properties' field has been set */
    public boolean hasProperties() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'properties' field */
    public influent.idl.FL_Cluster.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'members' field */
    public java.util.List<java.lang.CharSequence> getMembers() {
      return members;
    }
    
    /** Sets the value of the 'members' field */
    public influent.idl.FL_Cluster.Builder setMembers(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.members = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'members' field has been set */
    public boolean hasMembers() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'members' field */
    public influent.idl.FL_Cluster.Builder clearMembers() {
      members = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'subclusters' field */
    public java.util.List<java.lang.CharSequence> getSubclusters() {
      return subclusters;
    }
    
    /** Sets the value of the 'subclusters' field */
    public influent.idl.FL_Cluster.Builder setSubclusters(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.subclusters = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'subclusters' field has been set */
    public boolean hasSubclusters() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'subclusters' field */
    public influent.idl.FL_Cluster.Builder clearSubclusters() {
      subclusters = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'parent' field */
    public java.lang.CharSequence getParent() {
      return parent;
    }
    
    /** Sets the value of the 'parent' field */
    public influent.idl.FL_Cluster.Builder setParent(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.parent = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'parent' field has been set */
    public boolean hasParent() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'parent' field */
    public influent.idl.FL_Cluster.Builder clearParent() {
      parent = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'root' field */
    public java.lang.CharSequence getRoot() {
      return root;
    }
    
    /** Sets the value of the 'root' field */
    public influent.idl.FL_Cluster.Builder setRoot(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.root = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'root' field has been set */
    public boolean hasRoot() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'root' field */
    public influent.idl.FL_Cluster.Builder clearRoot() {
      root = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'level' field */
    public java.lang.Integer getLevel() {
      return level;
    }
    
    /** Sets the value of the 'level' field */
    public influent.idl.FL_Cluster.Builder setLevel(int value) {
      validate(fields()[9], value);
      this.level = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'level' field has been set */
    public boolean hasLevel() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'level' field */
    public influent.idl.FL_Cluster.Builder clearLevel() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'version' field */
    public java.lang.Integer getVersion() {
      return version;
    }
    
    /** Sets the value of the 'version' field */
    public influent.idl.FL_Cluster.Builder setVersion(int value) {
      validate(fields()[10], value);
      this.version = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'version' field has been set */
    public boolean hasVersion() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'version' field */
    public influent.idl.FL_Cluster.Builder clearVersion() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    public FL_Cluster build() {
      try {
        FL_Cluster record = new FL_Cluster();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tags = fieldSetFlags()[1] ? this.tags : (java.util.List<influent.idl.FL_EntityTag>) defaultValue(fields()[1]);
        record.provenance = fieldSetFlags()[2] ? this.provenance : (influent.idl.FL_Provenance) defaultValue(fields()[2]);
        record.uncertainty = fieldSetFlags()[3] ? this.uncertainty : (influent.idl.FL_Uncertainty) defaultValue(fields()[3]);
        record.properties = fieldSetFlags()[4] ? this.properties : (java.util.List<influent.idl.FL_Property>) defaultValue(fields()[4]);
        record.members = fieldSetFlags()[5] ? this.members : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[5]);
        record.subclusters = fieldSetFlags()[6] ? this.subclusters : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.parent = fieldSetFlags()[7] ? this.parent : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.root = fieldSetFlags()[8] ? this.root : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.level = fieldSetFlags()[9] ? this.level : (java.lang.Integer) defaultValue(fields()[9]);
        record.version = fieldSetFlags()[10] ? this.version : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
