/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** A frequency or probability element of a distribution.
	 
	ADDED IN 1.6 */
@org.apache.avro.specific.AvroGenerated
public class FL_Frequency extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_Frequency\",\"namespace\":\"influent.idl\",\"doc\":\"A frequency or probability element of a distribution.\\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"range\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"FL_GeoData\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[\"null\",\"string\"],\"doc\":\"ISO 3 digit country code\",\"default\":null}]},{\"type\":\"record\",\"name\":\"FL_ListRange\",\"doc\":\"List of values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\"]}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FL_PropertyType\",\"doc\":\"Allowed types for Property values.\\n\\n\\t CHANGED in 1.5\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"OTHER\"]},\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},{\"type\":\"record\",\"name\":\"FL_BoundedRange\",\"doc\":\"Bounded or unbounded range values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"start\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"null\"],\"doc\":\"start of range, or null if unbounded start\"},{\"name\":\"end\",\"type\":[\"string\",\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"null\"],\"doc\":\"end of range, or null if unbounded start\"},{\"name\":\"inclusive\",\"type\":\"boolean\",\"doc\":\"If true, range includes specified endpoint. If false, range is exclusive.\"},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]}],\"doc\":\"the value range which occurs with some specified frequency\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"frequency as a count, or probability as a value from 0-1.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** the value range which occurs with some specified frequency */
  @Deprecated public java.lang.Object range;
  /** frequency as a count, or probability as a value from 0-1. */
  @Deprecated public double frequency;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FL_Frequency() {}

  /**
   * All-args constructor.
   */
  public FL_Frequency(java.lang.Object range, java.lang.Double frequency) {
    this.range = range;
    this.frequency = frequency;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return range;
    case 1: return frequency;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: range = (java.lang.Object)value$; break;
    case 1: frequency = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'range' field.
   * the value range which occurs with some specified frequency   */
  public java.lang.Object getRange() {
    return range;
  }

  /**
   * Sets the value of the 'range' field.
   * the value range which occurs with some specified frequency   * @param value the value to set.
   */
  public void setRange(java.lang.Object value) {
    this.range = value;
  }

  /**
   * Gets the value of the 'frequency' field.
   * frequency as a count, or probability as a value from 0-1.   */
  public java.lang.Double getFrequency() {
    return frequency;
  }

  /**
   * Sets the value of the 'frequency' field.
   * frequency as a count, or probability as a value from 0-1.   * @param value the value to set.
   */
  public void setFrequency(java.lang.Double value) {
    this.frequency = value;
  }

  /** Creates a new FL_Frequency RecordBuilder */
  public static influent.idl.FL_Frequency.Builder newBuilder() {
    return new influent.idl.FL_Frequency.Builder();
  }
  
  /** Creates a new FL_Frequency RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_Frequency.Builder newBuilder(influent.idl.FL_Frequency.Builder other) {
    return new influent.idl.FL_Frequency.Builder(other);
  }
  
  /** Creates a new FL_Frequency RecordBuilder by copying an existing FL_Frequency instance */
  public static influent.idl.FL_Frequency.Builder newBuilder(influent.idl.FL_Frequency other) {
    return new influent.idl.FL_Frequency.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_Frequency instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_Frequency>
    implements org.apache.avro.data.RecordBuilder<FL_Frequency> {

    private java.lang.Object range;
    private double frequency;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_Frequency.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_Frequency.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.range)) {
        this.range = data().deepCopy(fields()[0].schema(), other.range);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FL_Frequency instance */
    private Builder(influent.idl.FL_Frequency other) {
            super(influent.idl.FL_Frequency.SCHEMA$);
      if (isValidValue(fields()[0], other.range)) {
        this.range = data().deepCopy(fields()[0].schema(), other.range);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.frequency)) {
        this.frequency = data().deepCopy(fields()[1].schema(), other.frequency);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'range' field */
    public java.lang.Object getRange() {
      return range;
    }
    
    /** Sets the value of the 'range' field */
    public influent.idl.FL_Frequency.Builder setRange(java.lang.Object value) {
      validate(fields()[0], value);
      this.range = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'range' field has been set */
    public boolean hasRange() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'range' field */
    public influent.idl.FL_Frequency.Builder clearRange() {
      range = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'frequency' field */
    public java.lang.Double getFrequency() {
      return frequency;
    }
    
    /** Sets the value of the 'frequency' field */
    public influent.idl.FL_Frequency.Builder setFrequency(double value) {
      validate(fields()[1], value);
      this.frequency = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'frequency' field has been set */
    public boolean hasFrequency() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'frequency' field */
    public influent.idl.FL_Frequency.Builder clearFrequency() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FL_Frequency build() {
      try {
        FL_Frequency record = new FL_Frequency();
        record.range = fieldSetFlags()[0] ? this.range : (java.lang.Object) defaultValue(fields()[0]);
        record.frequency = fieldSetFlags()[1] ? this.frequency : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
