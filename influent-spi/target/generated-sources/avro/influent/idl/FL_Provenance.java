/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** This is a placeholder for future modeling of provenance. It is not a required field in any service calls. */
@org.apache.avro.specific.AvroGenerated
public class FL_Provenance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_Provenance\",\"namespace\":\"influent.idl\",\"doc\":\"This is a placeholder for future modeling of provenance. It is not a required field in any service calls.\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\",\"doc\":\"Placeholder for now. Express provenance as a single URI.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Placeholder for now. Express provenance as a single URI. */
  @Deprecated public java.lang.CharSequence uri;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public FL_Provenance() {}

  /**
   * All-args constructor.
   */
  public FL_Provenance(java.lang.CharSequence uri) {
    this.uri = uri;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * Placeholder for now. Express provenance as a single URI.   */
  public java.lang.CharSequence getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * Placeholder for now. Express provenance as a single URI.   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /** Creates a new FL_Provenance RecordBuilder */
  public static influent.idl.FL_Provenance.Builder newBuilder() {
    return new influent.idl.FL_Provenance.Builder();
  }
  
  /** Creates a new FL_Provenance RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_Provenance.Builder newBuilder(influent.idl.FL_Provenance.Builder other) {
    return new influent.idl.FL_Provenance.Builder(other);
  }
  
  /** Creates a new FL_Provenance RecordBuilder by copying an existing FL_Provenance instance */
  public static influent.idl.FL_Provenance.Builder newBuilder(influent.idl.FL_Provenance other) {
    return new influent.idl.FL_Provenance.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_Provenance instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_Provenance>
    implements org.apache.avro.data.RecordBuilder<FL_Provenance> {

    private java.lang.CharSequence uri;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_Provenance.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_Provenance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing FL_Provenance instance */
    private Builder(influent.idl.FL_Provenance other) {
            super(influent.idl.FL_Provenance.SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'uri' field */
    public java.lang.CharSequence getUri() {
      return uri;
    }
    
    /** Sets the value of the 'uri' field */
    public influent.idl.FL_Provenance.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uri' field has been set */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uri' field */
    public influent.idl.FL_Provenance.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public FL_Provenance build() {
      try {
        FL_Provenance record = new FL_Provenance();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
