/*
 * Copyright 2013-2016 Uncharted Software Inc.
 *
 *  Property of Uncharted(TM), formerly Oculus Info Inc.
 *  https://uncharted.software/
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

@namespace("influent.idl")


protocol FL_DataTypes {
	import idl "DataEnums_v2.0.avdl";

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * This is a placeholder for future modeling of provenance. It is not a required field in any service calls.
	 */
	record FL_Provenance {
		/** Placeholder for now. Express provenance as a single URI. */
		string uri;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.
	 *
	 * CHANGED IN 1.6
	 */
	record FL_Uncertainty {
		/** Placeholder for now. Express original source confidence as a single number from 0 to 1. */
		double confidence = 1;

		/** Placeholder for now. Express confidence in currency of data as a single number from 0 to 1. */
		double currency = 1; // ADDED IN 1.6
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * A URL and MIME type representing a pointer to text, image or other external resource.
	 */
	record FL_LinkedData {
		/** URL of the resource */
		string url;

		/** MIME type of the resource */
		union {null, string} mimeType = null;		// CHANGED IN 1.8

		/** description of the linked resource (suitable for display to the user in an hypertext link) */
		union {null, string} title = null;			// CHANGED IN 1.8
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Structured representation of geo-spatial data.
	 */
	record FL_GeoData {
		/** an address or other place reference; unstructured text field */
		union {null, string} text = null;			// CHANGED IN 1.8

		/** latitude */
		union {double, null} lat = null;

		/** longitude */
		union {double, null} lon = null;

		/** ISO 3 digit country code */
		union {null, string} cc = null;				// CHANGED IN 1.8
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Structured representation of country data, which includes geo-spatial data.
	 *
	 * ADDED IN 1.6
	 */
	record FL_Country {

		/** country geo data, including the name as text */
		FL_GeoData country;

		/** the name of the global region to which the country belongs; any common classification here is acceptable */
		string region;

		/** continent */
		FL_ContinentCode continent;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * A temporal duration
	 *
	 * ADDED IN 1.5
	 */
	record FL_Duration {
		/** time aggregation level, e.g. use monthly data */
		FL_DateInterval interval;

		/** number of intervals, e.g. 12 monthly intervals is a 1 year duration */
		long numIntervals;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Describes a date range at a specific resolution.
	 *
	 * CHANGED IN 1.5
	 */
	record FL_DateRange {
		long startDate;

		/** number of bins to return, e.g. 12 monthly bins for 1 year of data */
		long numBins;

		/** number of intervals in a bin, e.g. 2 months/bin in 12 bins for 2 years of data */
		FL_Duration durationPerBin;  // CHANGED IN 1.5
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Single value
	 *
	 * ADDED IN 1.5
	 */
	record FL_SingletonRange {
		union {string, int, float, double, long, boolean, FL_GeoData} value;

		/** One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO, IMAGE */
		FL_PropertyType type;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * List of values
	 *
	 * ADDED IN 1.5
	 */
	record FL_ListRange {
		array<union {string, int, float, double, long, boolean, FL_GeoData}> values;

		/** One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO */
		FL_PropertyType type;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Bounded or unbounded range values
	 *
	 * ADDED IN 1.5
	 */
	record FL_BoundedRange {
		/** start of range, or null if unbounded start */
		union {string, int, float, double, long, boolean, FL_GeoData, null} start;

		/** end of range, or null if unbounded start */
		union {string, int, float, double, long, boolean, FL_GeoData, null} end;

		/** If true, range includes specified endpoint. If false, range is exclusive. */
		boolean inclusive;

		/** One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO */
		FL_PropertyType type;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * A frequency or probability element of a distribution.
	 *
	 * ADDED IN 1.6
	 */
	record FL_Frequency {
		/** the value range which occurs with some specified frequency */
		union {string, int, float, double, long, boolean, FL_GeoData, FL_ListRange, FL_BoundedRange} range;

		/** frequency as a count, or probability as a value from 0-1. */
		double frequency;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Describes a distribution of values.
	 *
	 * ADDED IN 1.6
	 */
	record FL_DistributionRange {
		array<FL_Frequency> distribution;

		/** Describes how the values in the distribution are summarised */
		FL_RangeType rangeType;

		/** The type of value that the distribution describes. One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO */
		FL_PropertyType type;

		/** True if a probability distribution, false if a frequency distribution */
		boolean isProbability = false;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Each property on an Entity or Link is a name-value pair, with data type information, as well as optional
	 * provenance. Tags provide a way for the data provider to associate semantic annotations to each property
	 * in terms of the semantics of the application.
	 *
	 * CHANGED IN 1.6
	 */
	record FL_Property {
		/** the field name in the underlying data source */
		string key;

		/** user-friendly short-text for key (displayable) */
		union {null, string} friendlyText = null;			// CHANGED IN 1.8

		/** range of values */
		union {FL_SingletonRange, FL_ListRange, FL_BoundedRange, FL_DistributionRange} range = null; // CHANGED IN 1.6

		union {null, FL_Provenance} provenance = null;

		union {null, FL_Uncertainty} uncertainty = null;

		/** one or more tags from the Tag list, used to map this source-specific field into the semantics of applications */
		array<FL_PropertyTag> tags;

		/** true if this property is hidden from the client */
		boolean isHidden = false;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * The nodes in the social, financial, communications or other graphs. May represent concrete individuals or organizations,
	 * specific proxies such as accounts, or the implicit individuals or groups behind those other entities.
	 */
	record FL_Entity {
		/** This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an
			explicit entity, or (2) encoded query information that can be used to find a set of associated record
			notionally representing an implicit entity (e.g. Loans&FirstName&LastName&Gender). Must not be used for
			IDs that aren't globally unique.  For example, in Kiva, "Lenders" has a UID ("L12345") while "Borrowers"
			have an encoded search in the Loans table for uid ("B{loan:23456;name=Daniel}").  The encoded information
			is data layer-specific, may be different from entity to entity or data set to data set, and should be
			considered opaque to the consumers of the entities.  Entities of type 2 should always have the Entity Tag
			ANONYMOUS to help distinguish them when required. */
		string uid;

		/** type */
		union {string, null} type;                        // ADDED IN 1.9

		/** Entity Tags (see above, e.g. "ACCOUNT") */
		array<FL_EntityTag> tags;

		union {FL_Provenance, null} provenance = null;

		union {FL_Uncertainty, null} uncertainty = null;

		array<FL_Property> properties;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * The links in the social, financial, communications or other graphs. May represent communication
	 * events, financial transactions or social connections.
	 */
	record FL_Link {
		/** This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an
			explicit link, or (2) encoded query information that can be used to find a set of associated record
			notionally representing an implicit link (e.g. Source&Target&Date&Amount). Must not be used for
			IDs that aren't globally unique.
		*/
		string uid;                                     // CHANGED IN 2.0

		/** link types */
		union {array<string>, null} linkTypes = null;

		/** source entity uid */
		union {null, string} source = null;				// CHANGED IN 1.8

		/** target entity uid */
		union {null, string} target = null;				// CHANGED IN 1.8

		/** type */
		union {string, null} type;                      // ADDED IN 1.9

		/** true if directed, false if undirected */
		boolean directed = true;

		union {FL_Provenance, null} provenance = null;

		union {FL_Uncertainty, null} uncertainty = null;

		array<FL_Property> properties;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Cluster of nodes in the social, financial, communications or other graphs.
	 *
	 * CHANGED in 1.7:
	 * 	- added version
	 */
	record FL_Cluster {
		/** A unique identifier use to retrieve data about this cluster. Should not be used for non-global identifiers. */
		string uid;

		/** Entity Tags (see DataTypes, e.g. "CLUSTER") */
		array<FL_EntityTag> tags;

		union {FL_Provenance, null} provenance = null;

		union {FL_Uncertainty, null} uncertainty = null;

		array<FL_Property> properties;

		/** List of id's of the members of this cluster */
		array<string> members;

		/** List of id's of the subclusters of this cluster - empty if this is a leaf cluster in cluster hierarchy */
		array<string> subclusters;

		/** The id of the parent cluster if this is a cluster in a hierarchy - Can be null if this is a root cluster **/
		union {null, string} parent = null;				// CHANGED IN 1.8

		/** The id of the root cluster (top level cluster) if this is a cluster in a hierarchy - Can be null if this is a root cluster **/
		union {null, string} root = null;				// CHANGED IN 1.8

		/** The degree from the root this cluster is in the hierarchy - level = 0 if this is a root cluster **/
		int level = 0;

		/** The version number of the cluster - each time the cluster contents is modified the version should be incremented **/
		int version = 1;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Represents the future results of an asynchronous task.
	 * Can be passed into the FutureResults service API
	 */
	record FL_Future {
		/** unique id of this task */
		string uid;

		/** short human-readable description of task for display */
		string label;

		/** uid of the service task is running on */
		union {null, string} service = null;			// CHANGED IN 1.8

		/** date/time task was started */
		long started;

		/** date/time task was completed (negative if not completed yet) */
		long completed = -1;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Selectable services, returned by getServices() in various APIs
	 */
	record FL_Service {
		/** unique id of this service */
		string uid;

		/** short human-readable description of service for display */
		string label;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Ordering instructions for records, as specified in search requests.
	 *
	 * ADDED IN 2.0
	 */
	record FL_OrderBy {

		/** The key of the property value to order by */
		string propertyKey;

		/** ascending? (or descending) */
		boolean ascending= false;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Used to describe how an FL_PropertyDescriptor maps to given a type.
	 *
	 * ADDED IN 1.8
	 */
	record FL_TypeMapping {

		/** The type that the mapping applies to **/
		string type;

		/** field that the FL_Property maps to in the type **/
		string memberKey;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Data summary information
	 *
	 * Added in 1.8
	 */
	record FL_DataSummary {
		union{string,null} key;
		union{string,null} label;
		union{string,null} value;
	}
}
