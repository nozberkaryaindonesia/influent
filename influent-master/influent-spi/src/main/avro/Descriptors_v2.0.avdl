/*
 * Copyright 2013-2016 Uncharted Software Inc.
 *
 *  Property of Uncharted(TM), formerly Oculus Info Inc.
 *  https://uncharted.software/
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

@namespace("influent.idl")


protocol FL_Descriptors {
	import idl "DataTypes_v2.0.avdl";

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Used to describe applicable types for a searchable property. Types may be grouped with the 'group' parameter.
	 *
	 * ADDED IN 1.8
	 */
	record FL_TypeDescriptor {

		/** unique key of the type descriptor applicable to a property **/
		string key;

		/** a human readable type name to display if the key isn't friendly (optional) */
		union {null,string} friendlyText = null;

		/** Group name (optional) **/
		union {null,string} group = null;

		/** Indicates whether searching within the defined group is exclusive **/
		boolean exclusive = true;

		/** the namespace the type is linked to **/
		string namespace;                                                                        // ADDED IN 2.0                                                                    // ADDED IN 2.0
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Used to describe data properties and their constraints
	 *
	 * The 'memberOf' parameter is a list of FL_TypeMapping that describes the property in the given types.
	 *
	 * ADDED IN 1.8
	 */
	record FL_PropertyDescriptor {
		/** property descriptor unique key */
		string key;

		/** a human readable property name to display if the key isn't friendly (optional) */
		union {null, string} friendlyText = null;                                                   // CHANGED IN 1.8

		/** data type of the property */
		FL_PropertyType propertyType;

		/** range of the Property to search on */
		union{FL_RangeType, null} range;                                                            // ADDED IN 1.5

		/** List of mappings against types to which this property belongs,  **/
		array<FL_TypeMapping> memberOf;                                                          	// ADDED IN 1.8

		/** REQUIRED_EQUALS, FUZZY_PARTIAL_OPTIONAL, NOT, OPTIONAL_EQUALS, FUZZY_REQUIRED*/
		union {FL_Constraint, null} constraint;                                                     // CHANGED IN 1.5

		/** indicates whether this property is indexed for free text queries, or not at all **/
		FL_SearchableBy searchableBy = "DESCRIPTOR";                                                // CHANGED IN 2.0

		/** Minimum amount of detail that this property is included in **/
		FL_LevelOfDetail levelOfDetail = "FULL";                                                    // ADDED IN 2.0

		/** List of tags that belong to this property **/
		array<FL_PropertyTag> tags;                                                                 // ADDED IN 2.0

		/** indicates whether this property can be used to sort **/
		boolean sortable = true;																	// ADDED IN 2.0

		/** indicates whether this property can have multiple values **/
        boolean multiValue = false;																	// ADDED IN 2.0
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * An instance of PropertyDescriptors is used to contain the dataset-specific type and property descriptions returned
	 * by getDescriptors()
	 *
	 * ADDED IN 1.8
	 */
	record FL_PropertyDescriptors {
		union {null,string} searchHint = null;
		array<FL_PropertyDescriptor> properties = null;
		array<FL_TypeDescriptor> types = null;
		union {null,array<FL_OrderBy>} orderBy = null;
		union {null,string} groupField = null;
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * A PropertyMatchDescriptor is used to describe a possible property that can be present in an entity or link. It describes
	 * a single property that can be used in a property search. It can optionally include example or suggested values
	 * for searching on.
	 *
	 * CHANGED IN 1.5
	 *
	 */
	record FL_PropertyMatchDescriptor {
		/** field name or FL_PropertyTag (or FL_PathMatchTag) that could be searched on */
		string key;

		/** value of the Property to search on */
		union {FL_SingletonRange, FL_ListRange, FL_BoundedRange} range = null;  // CHANGED IN 1.5

		/** If not null/empty, the value is relative to a logical variable specified here (e.g. "X")
		 *  Other parameters using the same logical variable name are relative to this value.
		 *  For instance, for a {key="amount", value="0.98", variable="A"} means that the value
		 *  of amount is 0.98A.  Another amount might be 0.55A, and the property match engine
		 *  (e.g. search engine, database query or pattern match algorithm) should understand
		 *  the relative values.
		 *
		 *  If no variable is specified, then the value is an absolute number. For example,
		 *  {key="amount", value="0.98"} refers to an amount of exactly 0.98.
		 */
		union {string, null} variable = "";  // CHANGED IN 1.5 (was "relative")

		/** Relative importance of this match criteria, where the default is 1.0.  */
		union {float, null} weight = 1.0;  // ADDED IN 1.7

		/** Require similarity for fuzzy searches, the default is null.  */
		union {float, null} similarity = 1.0;  // ADDED IN 1.7

		/** If true, INCLUDE all values matching this descriptor. If false, EXCLUDE all values matching this descriptor. */
		boolean include = true;  // ADDED IN 1.5

		/** MUST_EQUALS, FUZZY_PARTIAL_OPTIONAL, MUST_NOT */
		union {FL_Constraint, null} constraint;   // CHANGED IN 1.5 (was "weight")

		/** List of type mappings to match in **/
		array<FL_TypeMapping> typeMappings = null;  // ADDED IN 1.8
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Description of entity match criteria within a pattern.
	 *
	 * CHANGED IN 1.5:
	 * - removed sameAs
	 * - replaced weight with constraint
	 *
	 */
	record FL_EntityMatchDescriptor {
		/**
		 * The UID of the PATTERN node (NOT the underlying matched entity ID).
		 * Will be referenced by FL_LinkMatchDescriptors as source or target, and in results.
		 * Cannot be null.
		 */
		string uid;

		/** Optional role name, for labeling the pattern for human understanding */
		union{null, string} role = null;				// CHANGED IN 1.8

		/** entities should match AT LEAST ONE OF the given entity IDs, if provided */
		union{array<string>, null} entities = null;

		/** entities should match AT LEAST ONE OF the given tags (e.g ACCOUNT), if provided */
		union{array<FL_EntityTag>, null} tags = null;

		/** entities should match ALL of the provided property descriptors (e.g. LABEL, GEO, etc)
		 * e.g. logical "AND". Partial matches may be returned, if scoring is provided.
		 */
		union{array<FL_PropertyMatchDescriptor>, null} properties = null;

		/** used for QBE -- not used to match like the entities list, this list of entities
		 * should be used by the system to infer the above constraints when the user does not
		 * provide them.
		 */
		union{array<string>, null} examplars = null;

		/** MUST_EQUALS, FUZZY_PARTIAL_OPTIONAL, MUST_NOT */
		union {FL_Constraint, null} constraint; // CHANGED IN 1.5 (was "weight")
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * CHANGED in 1.5 - The PathMatchDescriptor was removed, and replaced with FL_PathMatchTags,
	 *   which can be used as they key in a PropertyMatch Descriptor. Set these to require
	 *   certain path lengths or path time window matches.
	 */
	record FL_LinkMatchDescriptor {
		/**
		 * The UID of the PATTERN link (NOT the underlying matched link ID). Will be referenced in results.
		 * Cannot be null.
		 */
		string uid;

		/** Optional role name, for labeling the pattern for human understanding */
		union{null, string} role = null;

		/** The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID)
		 * Being null indicates that matched links should have no source node
		 */
		union{null, string} source;

		/** The UID of a FL_EntityMatchDescriptor node (not an underlying Entity UID)
		 * Being null indicates that matched links should have no target node
		 */
		union{null, string} target;

		/** link types, if provided */
		union{array<string>, null} linkTypes = null;

		/** entities should match ALL of the provided property descriptors (e.g. LABEL, etc), if provided */
		union{array<FL_PropertyMatchDescriptor>, null} properties = null;

		/** If not negative, indicates the relative order of events within the pattern. Need not be unique.
		 * If not provided, then transaction/event order must be inferred from the graph structure.
		 */
		int stage = -1;

		/** MUST_EQUALS, FUZZY_PARTIAL_OPTIONAL, MUST_NOT */
		union {FL_Constraint, null} constraint = null; // CHANGED IN 1.5 (replaces weight)
	}

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Defines a pattern, either for input by the user, or as part of a pattern library.
	 */
	record FL_PatternDescriptor {

		/** unique ID of the pattern **/
		string uid;

		/** displayable name of the pattern **/
		string name;

		/** displayable long description of the pattern **/
		union {null, string} description = null;

		/**
		 * - ordered list of entity criteria for the pattern
		 * - the first nodes in the ordered list represent stages earlier in the sequence of events
		 * - CHANGED in 1.5: graphs may have cycles
		 */
		array<FL_EntityMatchDescriptor> entities;

		/**
		 * - link criteria between the entities above
		 * - CHANGED in 1.5: graphs may have cycles
		 */
		array<FL_LinkMatchDescriptor> links;
	}
}
