/*
 * Copyright 2013-2016 Uncharted Software Inc.
 *
 *  Property of Uncharted(TM), formerly Oculus Info Inc.
 *  https://uncharted.software/
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

@namespace("influent.idl")


protocol FL_EntitySearch {
	import idl "Search_v2.0.avdl";

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns a set of Entity search results based on the query (if provided)
	 * AND all matching terms (if any). Partial matches are allowed, but should
	 * be ranked lower.
	 *
	 * Service URL: /entity/search
	 * HTTP Method: POST and GET
	 *
	 * CHANGED IN 2.0
	 *
	 * @param termMap		Property Search Terms by type
	 * @param orderBy		Priority-ordered list of fields to sort by.
	 * @param start		    0-based index of first result to return
	 * @param max			maximum number of results to return
	 * @return				SearchResults
	 */
	FL_SearchResults search(
		map<array<FL_PropertyMatchDescriptor>> termMap,   // CHANGED IN 1.9
		array<FL_OrderBy> orderBy = null,                 // ADDED IN 2.0
		long start = 0,
		long max = -1,
		FL_LevelOfDetail levelOfDetail
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns the property descriptors that can be used for a Search. This is normally used to populate the Advanced
	 * Search UI, providing a list of various sub-sets of the data (by type) and the valid search options for each.
	 *
	 * Service URL: /entity/descriptors
	 * HTTP Method: GET
	 *
	 * @return a PropertyDescriptors instance that contains an array of PropertyDescriptor and an array of TypeDescriptor,
	 * where fields in these descriptors contain info about the dataset-specific types and properties
	 *
	 * CHANGED IN 1.8
	 */
	FL_PropertyDescriptors getDescriptors();

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Returns ordered property descriptors for organising key fields of search results in a structured way.
	 * These translate into columns in certain views.
	 *
	 * @param results		Search results.
	 *                      Clients may optionally consider this in choosing which headers to use.
	 * @param resultOrder	Priority-ordered list of fields that the results were sorted by, to be returned in the response.
	 *                      Clients may optionally consider this in choosing which headers to use.
	 *
	 * ADDED IN 2.0
	 */
	FL_PropertyDescriptors getKeyDescriptors(FL_SearchResults results, array<FL_OrderBy> resultOrder);
}
