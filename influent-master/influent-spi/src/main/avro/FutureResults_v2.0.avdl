/*
 * Copyright 2013-2016 Uncharted Software Inc.
 *
 *  Property of Uncharted(TM), formerly Oculus Info Inc.
 *  https://uncharted.software/
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

@namespace("influent.idl")


/**
 * This defines an API for
 */
protocol FL_FutureResults {
	import idl "DataTypes_v2.0.avdl";

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Set a timeout for the task.
	 *
	 * Service URL: /future/timeout
	 * HTTP Method: POST and GET
	 *
	 * @param future 		the future returned from the original call
	 * @param timeout		once set, task will terminate after specified time (in seconds)
	 */
	void setTimeout(
		FL_Future future,
		long timeout
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Execution state of task.
	 *
	 * Service URL: /future/completed
	 * HTTP Method: POST and GET
	 *
	 * @param future    the future returned from the original call
	 * @return          false while still processing, true if completed (successfully or not)
	 */
	boolean getCompleted(
		FL_Future future
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Error occured during task.
	 *
	 * Service URL: /future/error
	 * HTTP Method: POST and GET
	 *
	 * @param future 		the future returned from the original call
	 * @return 			if the task completed due to an error, a description of the error
	 */
	union{string,null} getError(
		FL_Future future
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Estimated progress of task.
	 *
	 * Service URL: /future/progress
	 * HTTP Method: POST and GET
	 *
	 * @param future 	the future returned from the original call
	 * @return 			estimated progress of the task (in seconds), negative if unknown
	 */
	double getProgress(
		FL_Future future
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Estimated duration of task, or time remaining (if in progress).
	 * Must be a valid time. Use an estimated order of magnitude if exact times aren't known.
	 *
	 * Service URL: /future/duration
	 * HTTP Method: POST and GET
	 *
	 * @param future 	the future returned from the original call
	 * @return 			estimated duration (or time remaining) of the task (in seconds)
	 */
	long getExpectedDuration(
		FL_Future future
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * Stop/cancel a running task. No effect if task is completed.
	 *
	 * Service URL: /future/stop
	 * HTTP Method: POST and GET
	 *
	 * @param future    the future returned from the original call
	 */
	void stop(
		FL_Future future
	);

	//------------------------------------------------------------------------------------------------------------------

	/**
	 * List the running (or recently completed but not garbage collected) tasks.
	 *
	 * Service URL: /future/list
	 * HTTP Method: POST and GET
	 *
	 * @return  list of running (or recently completed) futures
	 */
	array<FL_Future> getFutures();
}
